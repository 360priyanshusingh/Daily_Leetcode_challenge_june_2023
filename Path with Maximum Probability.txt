class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
         vector<vector<pair<int,double>>> adj(n);

         for(int i=0;i<edges.size();i++){
             adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
             adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
         }

         vector<double> pro(n,0);
         queue<int> q;
         q.push(start);
         pro[start]=1.0;

         while(!q.empty()){
             int node=q.front();
             q.pop();

             for(auto h:adj[node]){
                  int nextnode=h.first;
                  double dis=h.second;

                  double p=dis*pro[node];
                  if(p > pro[nextnode]){
                       pro[nextnode]=p;
                       q.push(nextnode);
                  }
             }
         }

        return  pro[end];
    }
};