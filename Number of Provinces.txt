class Solution {
public:
    void dfc(vector<vector<int>>& adj,vector<bool> &visited, int node){
        //  if(visited[node]==true)
        //       return ;
        for(auto &a:adj[node]){
            if(a==node) continue;
            if(visited[a]==false){
              visited[a]=true;
              dfc(adj,visited,a);
            }
        }
        return ;

    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        vector<vector<int>> adj(n+1);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]){
                    adj[i+1].push_back(j+1);
                }
            }
        } 

       vector<bool> visited(n+1,false);
       visited[0]=true;
       int numg=0;
       for(int i=1;i<=n;i++){
           if(visited[i]==false){
               dfc(adj,visited,i);
               numg++;
           }
       }
       return numg;
    }
};