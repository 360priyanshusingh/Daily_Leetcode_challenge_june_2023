class Solution {
public:
    void dfs(vector<int> adj[],int node,int &c,vector<bool> &vis){
        if(vis[node]==true) return ;
        c++;
        vis[node]=true;
        for(auto a:adj[node]){
            if(a==node || vis[a]==true) continue;
            dfs(adj,a,c,vis);
        }
         
    }
    int maximumDetonation(vector<vector<int>>& bombs) {
        int n=bombs.size();
        vector<int> adj[n];
        for(int i=0;i<n;i++){
            int x1=bombs[i][0];
            int y1=bombs[i][1];
            int r1=bombs[i][2];

            for(int j=0;j<n;j++){
                 if(i==j) continue;

                 long long x2=bombs[j][0];
                 long long y2=bombs[j][1];
                 long long r2=bombs[j][2];
                 long long deq=((x1-x2) * (x1-x2) ) + (  (y1-y2) * (y1-y2) );
                 long long p=r1;
              if(deq<=p*p){
                  adj[i].push_back(j);
              }
      
            }

        }
        
        int ans=0;
        for(int i=0;i<n;i++){
          vector<bool> vis(n,false); 
          int c=0;
          dfs(adj,i,c,vis);
           ans=max(ans,c);
        }

        return ans;
    }
};